# ============================================
# FILE: generator/clients/base_client.py
# ============================================
from abc import ABC, abstractmethod
from typing import Type, TypeVar
from pydantic import BaseModel

T = TypeVar('T', bound=BaseModel)

class BaseLLMClient(ABC):
    """Base abstract client for LLM interactions"""
    
    @abstractmethod
    def generate(self, prompt: str) -> str:
        """
        Generates unstructured text content.
        
        Args:
            prompt: User's prompt
            
        Returns:
            Text generated by the model
        """
        pass
    
    @abstractmethod
    def generate_structured(
        self, 
        prompt: str, 
        response_schema: Type[T],
        **kwargs
    ) -> T:
        """
        Generates structured content based on a Pydantic schema.
        
        Args:
            prompt: User's prompt
            response_schema: Pydantic model class (can be List[Model])
            **kwargs: Additional provider-specific parameters
            
        Returns:
            Parsed object of type response_schema (or list of objects)
        """
        pass