# ============================================
# FILE: generator/clients/gemini_client.py
# ============================================
from google import genai
from .base_client import BaseLLMClient


class GeminiClient(BaseLLMClient):
    """Client for Google Gemini using the modern API"""
    
    def __init__(self, api_key: str = None, model: str = "gemini-2.0-flash-exp"):
        """
        Initializes the Gemini client.
        
        Args:
            api_key: Gemini API key (if None, uses GEMINI_API_KEY from the environment)
            model: Name of the model to use
        """
        # If api_key is passed, configure it in the environment
        if not api_key:
            raise ValueError("GEMINI_API_KEY not found in the environment or as an argument.")

        self.client = genai.Client(api_key=api_key)
        self.model = model
    
    def generate(self, prompt: str) -> str:
        """
        Generates content using Gemini.
        
        Args:
            prompt: User's prompt
            
        Returns:
            Text generated by the model
        """
        try:
            response = self.client.models.generate_content(
                model=self.model,
                contents=prompt
            )
            return response.text
        except Exception as e:
            raise RuntimeError(f"Error generating content with Gemini: {str(e)}")
